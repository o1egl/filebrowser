// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: filebrowser/v1/file_service.proto

package filebrowserv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/filebrowser/filebrowser/gen/proto/filebrowser/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// FileServiceName is the fully-qualified name of the FileService service.
	FileServiceName = "filebrowser.v1.FileService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FileServiceListProcedure is the fully-qualified name of the FileService's List RPC.
	FileServiceListProcedure = "/filebrowser.v1.FileService/List"
	// FileServiceRenameProcedure is the fully-qualified name of the FileService's Rename RPC.
	FileServiceRenameProcedure = "/filebrowser.v1.FileService/Rename"
	// FileServiceMoveProcedure is the fully-qualified name of the FileService's Move RPC.
	FileServiceMoveProcedure = "/filebrowser.v1.FileService/Move"
	// FileServiceCopyProcedure is the fully-qualified name of the FileService's Copy RPC.
	FileServiceCopyProcedure = "/filebrowser.v1.FileService/Copy"
	// FileServiceDeleteProcedure is the fully-qualified name of the FileService's Delete RPC.
	FileServiceDeleteProcedure = "/filebrowser.v1.FileService/Delete"
)

// FileServiceClient is a client for the filebrowser.v1.FileService service.
type FileServiceClient interface {
	List(context.Context, *connect.Request[v1.FileServiceListRequest]) (*connect.Response[v1.FileServiceListResponse], error)
	Rename(context.Context, *connect.Request[v1.FileServiceRenameRequest]) (*connect.Response[v1.FileServiceRenameResponse], error)
	Move(context.Context, *connect.Request[v1.FileServiceMoveRequest]) (*connect.Response[v1.FileServiceMoveResponse], error)
	Copy(context.Context, *connect.Request[v1.FileServiceCopyRequest]) (*connect.Response[v1.FileServiceCopyResponse], error)
	Delete(context.Context, *connect.Request[v1.FileServiceDeleteRequest]) (*connect.Response[v1.FileServiceDeleteResponse], error)
}

// NewFileServiceClient constructs a client for the filebrowser.v1.FileService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFileServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fileServiceClient{
		list: connect.NewClient[v1.FileServiceListRequest, v1.FileServiceListResponse](
			httpClient,
			baseURL+FileServiceListProcedure,
			opts...,
		),
		rename: connect.NewClient[v1.FileServiceRenameRequest, v1.FileServiceRenameResponse](
			httpClient,
			baseURL+FileServiceRenameProcedure,
			opts...,
		),
		move: connect.NewClient[v1.FileServiceMoveRequest, v1.FileServiceMoveResponse](
			httpClient,
			baseURL+FileServiceMoveProcedure,
			opts...,
		),
		copy: connect.NewClient[v1.FileServiceCopyRequest, v1.FileServiceCopyResponse](
			httpClient,
			baseURL+FileServiceCopyProcedure,
			opts...,
		),
		delete: connect.NewClient[v1.FileServiceDeleteRequest, v1.FileServiceDeleteResponse](
			httpClient,
			baseURL+FileServiceDeleteProcedure,
			opts...,
		),
	}
}

// fileServiceClient implements FileServiceClient.
type fileServiceClient struct {
	list   *connect.Client[v1.FileServiceListRequest, v1.FileServiceListResponse]
	rename *connect.Client[v1.FileServiceRenameRequest, v1.FileServiceRenameResponse]
	move   *connect.Client[v1.FileServiceMoveRequest, v1.FileServiceMoveResponse]
	copy   *connect.Client[v1.FileServiceCopyRequest, v1.FileServiceCopyResponse]
	delete *connect.Client[v1.FileServiceDeleteRequest, v1.FileServiceDeleteResponse]
}

// List calls filebrowser.v1.FileService.List.
func (c *fileServiceClient) List(ctx context.Context, req *connect.Request[v1.FileServiceListRequest]) (*connect.Response[v1.FileServiceListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Rename calls filebrowser.v1.FileService.Rename.
func (c *fileServiceClient) Rename(ctx context.Context, req *connect.Request[v1.FileServiceRenameRequest]) (*connect.Response[v1.FileServiceRenameResponse], error) {
	return c.rename.CallUnary(ctx, req)
}

// Move calls filebrowser.v1.FileService.Move.
func (c *fileServiceClient) Move(ctx context.Context, req *connect.Request[v1.FileServiceMoveRequest]) (*connect.Response[v1.FileServiceMoveResponse], error) {
	return c.move.CallUnary(ctx, req)
}

// Copy calls filebrowser.v1.FileService.Copy.
func (c *fileServiceClient) Copy(ctx context.Context, req *connect.Request[v1.FileServiceCopyRequest]) (*connect.Response[v1.FileServiceCopyResponse], error) {
	return c.copy.CallUnary(ctx, req)
}

// Delete calls filebrowser.v1.FileService.Delete.
func (c *fileServiceClient) Delete(ctx context.Context, req *connect.Request[v1.FileServiceDeleteRequest]) (*connect.Response[v1.FileServiceDeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// FileServiceHandler is an implementation of the filebrowser.v1.FileService service.
type FileServiceHandler interface {
	List(context.Context, *connect.Request[v1.FileServiceListRequest]) (*connect.Response[v1.FileServiceListResponse], error)
	Rename(context.Context, *connect.Request[v1.FileServiceRenameRequest]) (*connect.Response[v1.FileServiceRenameResponse], error)
	Move(context.Context, *connect.Request[v1.FileServiceMoveRequest]) (*connect.Response[v1.FileServiceMoveResponse], error)
	Copy(context.Context, *connect.Request[v1.FileServiceCopyRequest]) (*connect.Response[v1.FileServiceCopyResponse], error)
	Delete(context.Context, *connect.Request[v1.FileServiceDeleteRequest]) (*connect.Response[v1.FileServiceDeleteResponse], error)
}

// NewFileServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFileServiceHandler(svc FileServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	fileServiceListHandler := connect.NewUnaryHandler(
		FileServiceListProcedure,
		svc.List,
		opts...,
	)
	fileServiceRenameHandler := connect.NewUnaryHandler(
		FileServiceRenameProcedure,
		svc.Rename,
		opts...,
	)
	fileServiceMoveHandler := connect.NewUnaryHandler(
		FileServiceMoveProcedure,
		svc.Move,
		opts...,
	)
	fileServiceCopyHandler := connect.NewUnaryHandler(
		FileServiceCopyProcedure,
		svc.Copy,
		opts...,
	)
	fileServiceDeleteHandler := connect.NewUnaryHandler(
		FileServiceDeleteProcedure,
		svc.Delete,
		opts...,
	)
	return "/filebrowser.v1.FileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FileServiceListProcedure:
			fileServiceListHandler.ServeHTTP(w, r)
		case FileServiceRenameProcedure:
			fileServiceRenameHandler.ServeHTTP(w, r)
		case FileServiceMoveProcedure:
			fileServiceMoveHandler.ServeHTTP(w, r)
		case FileServiceCopyProcedure:
			fileServiceCopyHandler.ServeHTTP(w, r)
		case FileServiceDeleteProcedure:
			fileServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFileServiceHandler struct{}

func (UnimplementedFileServiceHandler) List(context.Context, *connect.Request[v1.FileServiceListRequest]) (*connect.Response[v1.FileServiceListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("filebrowser.v1.FileService.List is not implemented"))
}

func (UnimplementedFileServiceHandler) Rename(context.Context, *connect.Request[v1.FileServiceRenameRequest]) (*connect.Response[v1.FileServiceRenameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("filebrowser.v1.FileService.Rename is not implemented"))
}

func (UnimplementedFileServiceHandler) Move(context.Context, *connect.Request[v1.FileServiceMoveRequest]) (*connect.Response[v1.FileServiceMoveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("filebrowser.v1.FileService.Move is not implemented"))
}

func (UnimplementedFileServiceHandler) Copy(context.Context, *connect.Request[v1.FileServiceCopyRequest]) (*connect.Response[v1.FileServiceCopyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("filebrowser.v1.FileService.Copy is not implemented"))
}

func (UnimplementedFileServiceHandler) Delete(context.Context, *connect.Request[v1.FileServiceDeleteRequest]) (*connect.Response[v1.FileServiceDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("filebrowser.v1.FileService.Delete is not implemented"))
}
