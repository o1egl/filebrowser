// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: filebrowser/v1/file_service.proto

package filebrowserv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileType int32

const (
	// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
	FileType_FILE_TYPE_REGULAR FileType = 0
	FileType_FILE_TYPE_DIR     FileType = 1
	// named pipe, device file, or socket
	FileType_FILE_TYPE_SPECIAL FileType = 2
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "FILE_TYPE_REGULAR",
		1: "FILE_TYPE_DIR",
		2: "FILE_TYPE_SPECIAL",
	}
	FileType_value = map[string]int32{
		"FILE_TYPE_REGULAR": 0,
		"FILE_TYPE_DIR":     1,
		"FILE_TYPE_SPECIAL": 2,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_filebrowser_v1_file_service_proto_enumTypes[0].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_filebrowser_v1_file_service_proto_enumTypes[0]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_filebrowser_v1_file_service_proto_rawDescGZIP(), []int{0}
}

type FileSortBy int32

const (
	// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
	FileSortBy_FILE_SORT_BY_NAME     FileSortBy = 0
	FileSortBy_FILE_SORT_BY_SIZE     FileSortBy = 1
	FileSortBy_FILE_SORT_BY_MOD_TIME FileSortBy = 2
)

// Enum value maps for FileSortBy.
var (
	FileSortBy_name = map[int32]string{
		0: "FILE_SORT_BY_NAME",
		1: "FILE_SORT_BY_SIZE",
		2: "FILE_SORT_BY_MOD_TIME",
	}
	FileSortBy_value = map[string]int32{
		"FILE_SORT_BY_NAME":     0,
		"FILE_SORT_BY_SIZE":     1,
		"FILE_SORT_BY_MOD_TIME": 2,
	}
)

func (x FileSortBy) Enum() *FileSortBy {
	p := new(FileSortBy)
	*p = x
	return p
}

func (x FileSortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileSortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_filebrowser_v1_file_service_proto_enumTypes[1].Descriptor()
}

func (FileSortBy) Type() protoreflect.EnumType {
	return &file_filebrowser_v1_file_service_proto_enumTypes[1]
}

func (x FileSortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileSortBy.Descriptor instead.
func (FileSortBy) EnumDescriptor() ([]byte, []int) {
	return file_filebrowser_v1_file_service_proto_rawDescGZIP(), []int{1}
}

type FileGroupBy int32

const (
	// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
	FileGroupBy_FILE_GROUP_BY_NONE FileGroupBy = 0
	FileGroupBy_FILE_GROUP_BY_TYPE FileGroupBy = 1
)

// Enum value maps for FileGroupBy.
var (
	FileGroupBy_name = map[int32]string{
		0: "FILE_GROUP_BY_NONE",
		1: "FILE_GROUP_BY_TYPE",
	}
	FileGroupBy_value = map[string]int32{
		"FILE_GROUP_BY_NONE": 0,
		"FILE_GROUP_BY_TYPE": 1,
	}
)

func (x FileGroupBy) Enum() *FileGroupBy {
	p := new(FileGroupBy)
	*p = x
	return p
}

func (x FileGroupBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileGroupBy) Descriptor() protoreflect.EnumDescriptor {
	return file_filebrowser_v1_file_service_proto_enumTypes[2].Descriptor()
}

func (FileGroupBy) Type() protoreflect.EnumType {
	return &file_filebrowser_v1_file_service_proto_enumTypes[2]
}

func (x FileGroupBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileGroupBy.Descriptor instead.
func (FileGroupBy) EnumDescriptor() ([]byte, []int) {
	return file_filebrowser_v1_file_service_proto_rawDescGZIP(), []int{2}
}

type FileOnConflict int32

const (
	// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
	FileOnConflict_FILE_ON_CONFLICT_NONE     FileOnConflict = 0
	FileOnConflict_FILE_ON_CONFLICT_OVERRIDE FileOnConflict = 1
	FileOnConflict_FILE_ON_CONFLICT_RENAME   FileOnConflict = 2
)

// Enum value maps for FileOnConflict.
var (
	FileOnConflict_name = map[int32]string{
		0: "FILE_ON_CONFLICT_NONE",
		1: "FILE_ON_CONFLICT_OVERRIDE",
		2: "FILE_ON_CONFLICT_RENAME",
	}
	FileOnConflict_value = map[string]int32{
		"FILE_ON_CONFLICT_NONE":     0,
		"FILE_ON_CONFLICT_OVERRIDE": 1,
		"FILE_ON_CONFLICT_RENAME":   2,
	}
)

func (x FileOnConflict) Enum() *FileOnConflict {
	p := new(FileOnConflict)
	*p = x
	return p
}

func (x FileOnConflict) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileOnConflict) Descriptor() protoreflect.EnumDescriptor {
	return file_filebrowser_v1_file_service_proto_enumTypes[3].Descriptor()
}

func (FileOnConflict) Type() protoreflect.EnumType {
	return &file_filebrowser_v1_file_service_proto_enumTypes[3]
}

func (x FileOnConflict) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileOnConflict.Descriptor instead.
func (FileOnConflict) EnumDescriptor() ([]byte, []int) {
	return file_filebrowser_v1_file_service_proto_rawDescGZIP(), []int{3}
}

type FileServiceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume    int64       `protobuf:"varint,1,opt,name=volume,proto3" json:"volume,omitempty"`
	Path      string      `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	GroupBy   FileGroupBy `protobuf:"varint,3,opt,name=group_by,json=groupBy,proto3,enum=filebrowser.v1.FileGroupBy" json:"group_by,omitempty"`
	SortBy    FileSortBy  `protobuf:"varint,4,opt,name=sort_by,json=sortBy,proto3,enum=filebrowser.v1.FileSortBy" json:"sort_by,omitempty"`
	SortOrder SortOrder   `protobuf:"varint,5,opt,name=sort_order,json=sortOrder,proto3,enum=filebrowser.v1.SortOrder" json:"sort_order,omitempty"`
}

func (x *FileServiceListRequest) Reset() {
	*x = FileServiceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filebrowser_v1_file_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServiceListRequest) ProtoMessage() {}

func (x *FileServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filebrowser_v1_file_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServiceListRequest.ProtoReflect.Descriptor instead.
func (*FileServiceListRequest) Descriptor() ([]byte, []int) {
	return file_filebrowser_v1_file_service_proto_rawDescGZIP(), []int{0}
}

func (x *FileServiceListRequest) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *FileServiceListRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileServiceListRequest) GetGroupBy() FileGroupBy {
	if x != nil {
		return x.GroupBy
	}
	return FileGroupBy_FILE_GROUP_BY_NONE
}

func (x *FileServiceListRequest) GetSortBy() FileSortBy {
	if x != nil {
		return x.SortBy
	}
	return FileSortBy_FILE_SORT_BY_NAME
}

func (x *FileServiceListRequest) GetSortOrder() SortOrder {
	if x != nil {
		return x.SortOrder
	}
	return SortOrder_SORT_ORDER_ASC
}

type FileServiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info     *FileInfo         `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Children []*FileInfo       `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
	Meta     *FileListMetaData `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *FileServiceListResponse) Reset() {
	*x = FileServiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filebrowser_v1_file_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServiceListResponse) ProtoMessage() {}

func (x *FileServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filebrowser_v1_file_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServiceListResponse.ProtoReflect.Descriptor instead.
func (*FileServiceListResponse) Descriptor() ([]byte, []int) {
	return file_filebrowser_v1_file_service_proto_rawDescGZIP(), []int{1}
}

func (x *FileServiceListResponse) GetInfo() *FileInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *FileServiceListResponse) GetChildren() []*FileInfo {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *FileServiceListResponse) GetMeta() *FileListMetaData {
	if x != nil {
		return x.Meta
	}
	return nil
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path      string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Name      string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Size      int64                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Extension string                 `protobuf:"bytes,4,opt,name=extension,proto3" json:"extension,omitempty"`
	ModTime   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=mod_time,json=modTime,proto3" json:"mod_time,omitempty"`
	Mode      uint32                 `protobuf:"varint,6,opt,name=mode,proto3" json:"mode,omitempty"`
	Type      FileType               `protobuf:"varint,7,opt,name=type,proto3,enum=filebrowser.v1.FileType" json:"type,omitempty"`
	IsSymlink bool                   `protobuf:"varint,8,opt,name=is_symlink,json=isSymlink,proto3" json:"is_symlink,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filebrowser_v1_file_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_filebrowser_v1_file_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_filebrowser_v1_file_service_proto_rawDescGZIP(), []int{2}
}

func (x *FileInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *FileInfo) GetModTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ModTime
	}
	return nil
}

func (x *FileInfo) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *FileInfo) GetType() FileType {
	if x != nil {
		return x.Type
	}
	return FileType_FILE_TYPE_REGULAR
}

func (x *FileInfo) GetIsSymlink() bool {
	if x != nil {
		return x.IsSymlink
	}
	return false
}

type FileListMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesCount int64 `protobuf:"varint,1,opt,name=files_count,json=filesCount,proto3" json:"files_count,omitempty"`
	DirsCount  int64 `protobuf:"varint,2,opt,name=dirs_count,json=dirsCount,proto3" json:"dirs_count,omitempty"`
	TotalCount int64 `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *FileListMetaData) Reset() {
	*x = FileListMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filebrowser_v1_file_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileListMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileListMetaData) ProtoMessage() {}

func (x *FileListMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_filebrowser_v1_file_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileListMetaData.ProtoReflect.Descriptor instead.
func (*FileListMetaData) Descriptor() ([]byte, []int) {
	return file_filebrowser_v1_file_service_proto_rawDescGZIP(), []int{3}
}

func (x *FileListMetaData) GetFilesCount() int64 {
	if x != nil {
		return x.FilesCount
	}
	return 0
}

func (x *FileListMetaData) GetDirsCount() int64 {
	if x != nil {
		return x.DirsCount
	}
	return 0
}

func (x *FileListMetaData) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type FileServiceDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume int64  `protobuf:"varint,1,opt,name=volume,proto3" json:"volume,omitempty"`
	Path   string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FileServiceDeleteRequest) Reset() {
	*x = FileServiceDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filebrowser_v1_file_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServiceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServiceDeleteRequest) ProtoMessage() {}

func (x *FileServiceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filebrowser_v1_file_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServiceDeleteRequest.ProtoReflect.Descriptor instead.
func (*FileServiceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_filebrowser_v1_file_service_proto_rawDescGZIP(), []int{4}
}

func (x *FileServiceDeleteRequest) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *FileServiceDeleteRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type FileServiceDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FileServiceDeleteResponse) Reset() {
	*x = FileServiceDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filebrowser_v1_file_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServiceDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServiceDeleteResponse) ProtoMessage() {}

func (x *FileServiceDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filebrowser_v1_file_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServiceDeleteResponse.ProtoReflect.Descriptor instead.
func (*FileServiceDeleteResponse) Descriptor() ([]byte, []int) {
	return file_filebrowser_v1_file_service_proto_rawDescGZIP(), []int{5}
}

type FileServiceRenameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume     int64          `protobuf:"varint,1,opt,name=volume,proto3" json:"volume,omitempty"`
	Path       string         `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Name       string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	OnConflict FileOnConflict `protobuf:"varint,4,opt,name=on_conflict,json=onConflict,proto3,enum=filebrowser.v1.FileOnConflict" json:"on_conflict,omitempty"`
}

func (x *FileServiceRenameRequest) Reset() {
	*x = FileServiceRenameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filebrowser_v1_file_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServiceRenameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServiceRenameRequest) ProtoMessage() {}

func (x *FileServiceRenameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filebrowser_v1_file_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServiceRenameRequest.ProtoReflect.Descriptor instead.
func (*FileServiceRenameRequest) Descriptor() ([]byte, []int) {
	return file_filebrowser_v1_file_service_proto_rawDescGZIP(), []int{6}
}

func (x *FileServiceRenameRequest) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *FileServiceRenameRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileServiceRenameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileServiceRenameRequest) GetOnConflict() FileOnConflict {
	if x != nil {
		return x.OnConflict
	}
	return FileOnConflict_FILE_ON_CONFLICT_NONE
}

type FileServiceRenameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FileServiceRenameResponse) Reset() {
	*x = FileServiceRenameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filebrowser_v1_file_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServiceRenameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServiceRenameResponse) ProtoMessage() {}

func (x *FileServiceRenameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filebrowser_v1_file_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServiceRenameResponse.ProtoReflect.Descriptor instead.
func (*FileServiceRenameResponse) Descriptor() ([]byte, []int) {
	return file_filebrowser_v1_file_service_proto_rawDescGZIP(), []int{7}
}

type FileLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume int64  `protobuf:"varint,1,opt,name=volume,proto3" json:"volume,omitempty"`
	Path   string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FileLocation) Reset() {
	*x = FileLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filebrowser_v1_file_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileLocation) ProtoMessage() {}

func (x *FileLocation) ProtoReflect() protoreflect.Message {
	mi := &file_filebrowser_v1_file_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileLocation.ProtoReflect.Descriptor instead.
func (*FileLocation) Descriptor() ([]byte, []int) {
	return file_filebrowser_v1_file_service_proto_rawDescGZIP(), []int{8}
}

func (x *FileLocation) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *FileLocation) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type FileServiceMoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src        *FileLocation  `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Dst        *FileLocation  `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
	OnConflict FileOnConflict `protobuf:"varint,4,opt,name=on_conflict,json=onConflict,proto3,enum=filebrowser.v1.FileOnConflict" json:"on_conflict,omitempty"`
}

func (x *FileServiceMoveRequest) Reset() {
	*x = FileServiceMoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filebrowser_v1_file_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServiceMoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServiceMoveRequest) ProtoMessage() {}

func (x *FileServiceMoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filebrowser_v1_file_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServiceMoveRequest.ProtoReflect.Descriptor instead.
func (*FileServiceMoveRequest) Descriptor() ([]byte, []int) {
	return file_filebrowser_v1_file_service_proto_rawDescGZIP(), []int{9}
}

func (x *FileServiceMoveRequest) GetSrc() *FileLocation {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *FileServiceMoveRequest) GetDst() *FileLocation {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *FileServiceMoveRequest) GetOnConflict() FileOnConflict {
	if x != nil {
		return x.OnConflict
	}
	return FileOnConflict_FILE_ON_CONFLICT_NONE
}

type FileServiceMoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FileServiceMoveResponse) Reset() {
	*x = FileServiceMoveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filebrowser_v1_file_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServiceMoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServiceMoveResponse) ProtoMessage() {}

func (x *FileServiceMoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filebrowser_v1_file_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServiceMoveResponse.ProtoReflect.Descriptor instead.
func (*FileServiceMoveResponse) Descriptor() ([]byte, []int) {
	return file_filebrowser_v1_file_service_proto_rawDescGZIP(), []int{10}
}

type FileServiceCopyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src        *FileLocation  `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Dst        *FileLocation  `protobuf:"bytes,2,opt,name=dst,proto3" json:"dst,omitempty"`
	OnConflict FileOnConflict `protobuf:"varint,4,opt,name=on_conflict,json=onConflict,proto3,enum=filebrowser.v1.FileOnConflict" json:"on_conflict,omitempty"`
}

func (x *FileServiceCopyRequest) Reset() {
	*x = FileServiceCopyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filebrowser_v1_file_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServiceCopyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServiceCopyRequest) ProtoMessage() {}

func (x *FileServiceCopyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filebrowser_v1_file_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServiceCopyRequest.ProtoReflect.Descriptor instead.
func (*FileServiceCopyRequest) Descriptor() ([]byte, []int) {
	return file_filebrowser_v1_file_service_proto_rawDescGZIP(), []int{11}
}

func (x *FileServiceCopyRequest) GetSrc() *FileLocation {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *FileServiceCopyRequest) GetDst() *FileLocation {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *FileServiceCopyRequest) GetOnConflict() FileOnConflict {
	if x != nil {
		return x.OnConflict
	}
	return FileOnConflict_FILE_ON_CONFLICT_NONE
}

type FileServiceCopyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FileServiceCopyResponse) Reset() {
	*x = FileServiceCopyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filebrowser_v1_file_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileServiceCopyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileServiceCopyResponse) ProtoMessage() {}

func (x *FileServiceCopyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filebrowser_v1_file_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileServiceCopyResponse.ProtoReflect.Descriptor instead.
func (*FileServiceCopyResponse) Descriptor() ([]byte, []int) {
	return file_filebrowser_v1_file_service_proto_rawDescGZIP(), []int{12}
}

var File_filebrowser_v1_file_service_proto protoreflect.FileDescriptor

var file_filebrowser_v1_file_service_proto_rawDesc = []byte{
	0x0a, 0x21, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xeb, 0x01, 0x0a, 0x16, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x62,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x33,
	0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x52, 0x06, 0x73, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xb3, 0x01,
	0x0a, 0x17, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x34, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x22, 0xfc, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x79, 0x6d, 0x6c, 0x69,
	0x6e, 0x6b, 0x22, 0x73, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x46, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22,
	0x1b, 0x0a, 0x19, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x01, 0x0a,
	0x18, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x0a,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x22, 0xb9, 0x01, 0x0a, 0x16, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x2e,
	0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x0b, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x52, 0x0a, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x22,
	0x19, 0x0a, 0x17, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x16, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x2e, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x0a, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2a, 0x4b, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c,
	0x41, 0x52, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x49, 0x52, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x55,
	0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x15, 0x0a, 0x11,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x52, 0x54,
	0x5f, 0x42, 0x59, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x02, 0x2a, 0x3d, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x01, 0x2a, 0x67, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x4c, 0x49, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x32, 0xe0, 0x03,
	0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x06, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x04, 0x4d, 0x6f, 0x76,
	0x65, 0x12, 0x26, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x04, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x26, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5f, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0xca, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x49, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x46, 0x58, 0x58, 0xaa, 0x02, 0x0e, 0x46,
	0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e,
	0x46, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x1a, 0x46, 0x69, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x46, 0x69,
	0x6c, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_filebrowser_v1_file_service_proto_rawDescOnce sync.Once
	file_filebrowser_v1_file_service_proto_rawDescData = file_filebrowser_v1_file_service_proto_rawDesc
)

func file_filebrowser_v1_file_service_proto_rawDescGZIP() []byte {
	file_filebrowser_v1_file_service_proto_rawDescOnce.Do(func() {
		file_filebrowser_v1_file_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_filebrowser_v1_file_service_proto_rawDescData)
	})
	return file_filebrowser_v1_file_service_proto_rawDescData
}

var file_filebrowser_v1_file_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_filebrowser_v1_file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_filebrowser_v1_file_service_proto_goTypes = []interface{}{
	(FileType)(0),                     // 0: filebrowser.v1.FileType
	(FileSortBy)(0),                   // 1: filebrowser.v1.FileSortBy
	(FileGroupBy)(0),                  // 2: filebrowser.v1.FileGroupBy
	(FileOnConflict)(0),               // 3: filebrowser.v1.FileOnConflict
	(*FileServiceListRequest)(nil),    // 4: filebrowser.v1.FileServiceListRequest
	(*FileServiceListResponse)(nil),   // 5: filebrowser.v1.FileServiceListResponse
	(*FileInfo)(nil),                  // 6: filebrowser.v1.FileInfo
	(*FileListMetaData)(nil),          // 7: filebrowser.v1.FileListMetaData
	(*FileServiceDeleteRequest)(nil),  // 8: filebrowser.v1.FileServiceDeleteRequest
	(*FileServiceDeleteResponse)(nil), // 9: filebrowser.v1.FileServiceDeleteResponse
	(*FileServiceRenameRequest)(nil),  // 10: filebrowser.v1.FileServiceRenameRequest
	(*FileServiceRenameResponse)(nil), // 11: filebrowser.v1.FileServiceRenameResponse
	(*FileLocation)(nil),              // 12: filebrowser.v1.FileLocation
	(*FileServiceMoveRequest)(nil),    // 13: filebrowser.v1.FileServiceMoveRequest
	(*FileServiceMoveResponse)(nil),   // 14: filebrowser.v1.FileServiceMoveResponse
	(*FileServiceCopyRequest)(nil),    // 15: filebrowser.v1.FileServiceCopyRequest
	(*FileServiceCopyResponse)(nil),   // 16: filebrowser.v1.FileServiceCopyResponse
	(SortOrder)(0),                    // 17: filebrowser.v1.SortOrder
	(*timestamppb.Timestamp)(nil),     // 18: google.protobuf.Timestamp
}
var file_filebrowser_v1_file_service_proto_depIdxs = []int32{
	2,  // 0: filebrowser.v1.FileServiceListRequest.group_by:type_name -> filebrowser.v1.FileGroupBy
	1,  // 1: filebrowser.v1.FileServiceListRequest.sort_by:type_name -> filebrowser.v1.FileSortBy
	17, // 2: filebrowser.v1.FileServiceListRequest.sort_order:type_name -> filebrowser.v1.SortOrder
	6,  // 3: filebrowser.v1.FileServiceListResponse.info:type_name -> filebrowser.v1.FileInfo
	6,  // 4: filebrowser.v1.FileServiceListResponse.children:type_name -> filebrowser.v1.FileInfo
	7,  // 5: filebrowser.v1.FileServiceListResponse.meta:type_name -> filebrowser.v1.FileListMetaData
	18, // 6: filebrowser.v1.FileInfo.mod_time:type_name -> google.protobuf.Timestamp
	0,  // 7: filebrowser.v1.FileInfo.type:type_name -> filebrowser.v1.FileType
	3,  // 8: filebrowser.v1.FileServiceRenameRequest.on_conflict:type_name -> filebrowser.v1.FileOnConflict
	12, // 9: filebrowser.v1.FileServiceMoveRequest.src:type_name -> filebrowser.v1.FileLocation
	12, // 10: filebrowser.v1.FileServiceMoveRequest.dst:type_name -> filebrowser.v1.FileLocation
	3,  // 11: filebrowser.v1.FileServiceMoveRequest.on_conflict:type_name -> filebrowser.v1.FileOnConflict
	12, // 12: filebrowser.v1.FileServiceCopyRequest.src:type_name -> filebrowser.v1.FileLocation
	12, // 13: filebrowser.v1.FileServiceCopyRequest.dst:type_name -> filebrowser.v1.FileLocation
	3,  // 14: filebrowser.v1.FileServiceCopyRequest.on_conflict:type_name -> filebrowser.v1.FileOnConflict
	4,  // 15: filebrowser.v1.FileService.List:input_type -> filebrowser.v1.FileServiceListRequest
	10, // 16: filebrowser.v1.FileService.Rename:input_type -> filebrowser.v1.FileServiceRenameRequest
	13, // 17: filebrowser.v1.FileService.Move:input_type -> filebrowser.v1.FileServiceMoveRequest
	15, // 18: filebrowser.v1.FileService.Copy:input_type -> filebrowser.v1.FileServiceCopyRequest
	8,  // 19: filebrowser.v1.FileService.Delete:input_type -> filebrowser.v1.FileServiceDeleteRequest
	5,  // 20: filebrowser.v1.FileService.List:output_type -> filebrowser.v1.FileServiceListResponse
	11, // 21: filebrowser.v1.FileService.Rename:output_type -> filebrowser.v1.FileServiceRenameResponse
	14, // 22: filebrowser.v1.FileService.Move:output_type -> filebrowser.v1.FileServiceMoveResponse
	16, // 23: filebrowser.v1.FileService.Copy:output_type -> filebrowser.v1.FileServiceCopyResponse
	9,  // 24: filebrowser.v1.FileService.Delete:output_type -> filebrowser.v1.FileServiceDeleteResponse
	20, // [20:25] is the sub-list for method output_type
	15, // [15:20] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_filebrowser_v1_file_service_proto_init() }
func file_filebrowser_v1_file_service_proto_init() {
	if File_filebrowser_v1_file_service_proto != nil {
		return
	}
	file_filebrowser_v1_sort_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_filebrowser_v1_file_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileServiceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filebrowser_v1_file_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileServiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filebrowser_v1_file_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filebrowser_v1_file_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileListMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filebrowser_v1_file_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileServiceDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filebrowser_v1_file_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileServiceDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filebrowser_v1_file_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileServiceRenameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filebrowser_v1_file_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileServiceRenameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filebrowser_v1_file_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filebrowser_v1_file_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileServiceMoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filebrowser_v1_file_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileServiceMoveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filebrowser_v1_file_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileServiceCopyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filebrowser_v1_file_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileServiceCopyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_filebrowser_v1_file_service_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_filebrowser_v1_file_service_proto_goTypes,
		DependencyIndexes: file_filebrowser_v1_file_service_proto_depIdxs,
		EnumInfos:         file_filebrowser_v1_file_service_proto_enumTypes,
		MessageInfos:      file_filebrowser_v1_file_service_proto_msgTypes,
	}.Build()
	File_filebrowser_v1_file_service_proto = out.File
	file_filebrowser_v1_file_service_proto_rawDesc = nil
	file_filebrowser_v1_file_service_proto_goTypes = nil
	file_filebrowser_v1_file_service_proto_depIdxs = nil
}
