// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"errors"
	"fmt"
)

const (
	// OperationStatusStateScheduled is a OperationStatusState of type scheduled.
	OperationStatusStateScheduled OperationStatusState = "scheduled"
	// OperationStatusStateInProgress is a OperationStatusState of type in_progress.
	OperationStatusStateInProgress OperationStatusState = "in_progress"
	// OperationStatusStateDone is a OperationStatusState of type done.
	OperationStatusStateDone OperationStatusState = "done"
	// OperationStatusStateError is a OperationStatusState of type error.
	OperationStatusStateError OperationStatusState = "error"
)

var ErrInvalidOperationStatusState = errors.New("not a valid OperationStatusState")

// String implements the Stringer interface.
func (x OperationStatusState) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x OperationStatusState) IsValid() bool {
	_, err := ParseOperationStatusState(string(x))
	return err == nil
}

var _OperationStatusStateValue = map[string]OperationStatusState{
	"scheduled":   OperationStatusStateScheduled,
	"in_progress": OperationStatusStateInProgress,
	"done":        OperationStatusStateDone,
	"error":       OperationStatusStateError,
}

// ParseOperationStatusState attempts to convert a string to a OperationStatusState.
func ParseOperationStatusState(name string) (OperationStatusState, error) {
	if x, ok := _OperationStatusStateValue[name]; ok {
		return x, nil
	}
	return OperationStatusState(""), fmt.Errorf("%s is %w", name, ErrInvalidOperationStatusState)
}

// MarshalText implements the text marshaller method.
func (x OperationStatusState) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *OperationStatusState) UnmarshalText(text []byte) error {
	tmp, err := ParseOperationStatusState(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
