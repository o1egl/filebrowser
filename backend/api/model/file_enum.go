// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"errors"
	"fmt"
)

const (
	// FileGroupByNone is a FileGroupBy of type none.
	FileGroupByNone FileGroupBy = "none"
	// FileGroupByKind is a FileGroupBy of type kind.
	FileGroupByKind FileGroupBy = "kind"
	// FileGroupByModified is a FileGroupBy of type modified.
	FileGroupByModified FileGroupBy = "modified"
	// FileGroupBySize is a FileGroupBy of type size.
	FileGroupBySize FileGroupBy = "size"
)

var ErrInvalidFileGroupBy = errors.New("not a valid FileGroupBy")

// String implements the Stringer interface.
func (x FileGroupBy) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x FileGroupBy) IsValid() bool {
	_, err := ParseFileGroupBy(string(x))
	return err == nil
}

var _FileGroupByValue = map[string]FileGroupBy{
	"none":     FileGroupByNone,
	"kind":     FileGroupByKind,
	"modified": FileGroupByModified,
	"size":     FileGroupBySize,
}

// ParseFileGroupBy attempts to convert a string to a FileGroupBy.
func ParseFileGroupBy(name string) (FileGroupBy, error) {
	if x, ok := _FileGroupByValue[name]; ok {
		return x, nil
	}
	return FileGroupBy(""), fmt.Errorf("%s is %w", name, ErrInvalidFileGroupBy)
}

// MarshalText implements the text marshaller method.
func (x FileGroupBy) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *FileGroupBy) UnmarshalText(text []byte) error {
	tmp, err := ParseFileGroupBy(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// OnConflictSkip is a OnConflict of type skip.
	OnConflictSkip OnConflict = "skip"
	// OnConflictOverride is a OnConflict of type override.
	OnConflictOverride OnConflict = "override"
	// OnConflictRename is a OnConflict of type rename.
	OnConflictRename OnConflict = "rename"
)

var ErrInvalidOnConflict = errors.New("not a valid OnConflict")

// String implements the Stringer interface.
func (x OnConflict) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x OnConflict) IsValid() bool {
	_, err := ParseOnConflict(string(x))
	return err == nil
}

var _OnConflictValue = map[string]OnConflict{
	"skip":     OnConflictSkip,
	"override": OnConflictOverride,
	"rename":   OnConflictRename,
}

// ParseOnConflict attempts to convert a string to a OnConflict.
func ParseOnConflict(name string) (OnConflict, error) {
	if x, ok := _OnConflictValue[name]; ok {
		return x, nil
	}
	return OnConflict(""), fmt.Errorf("%s is %w", name, ErrInvalidOnConflict)
}

// MarshalText implements the text marshaller method.
func (x OnConflict) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *OnConflict) UnmarshalText(text []byte) error {
	tmp, err := ParseOnConflict(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// SortByName is a SortBy of type name.
	SortByName SortBy = "name"
	// SortBySize is a SortBy of type size.
	SortBySize SortBy = "size"
	// SortByModified is a SortBy of type modified.
	SortByModified SortBy = "modified"
)

var ErrInvalidSortBy = errors.New("not a valid SortBy")

// String implements the Stringer interface.
func (x SortBy) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SortBy) IsValid() bool {
	_, err := ParseSortBy(string(x))
	return err == nil
}

var _SortByValue = map[string]SortBy{
	"name":     SortByName,
	"size":     SortBySize,
	"modified": SortByModified,
}

// ParseSortBy attempts to convert a string to a SortBy.
func ParseSortBy(name string) (SortBy, error) {
	if x, ok := _SortByValue[name]; ok {
		return x, nil
	}
	return SortBy(""), fmt.Errorf("%s is %w", name, ErrInvalidSortBy)
}

// MarshalText implements the text marshaller method.
func (x SortBy) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *SortBy) UnmarshalText(text []byte) error {
	tmp, err := ParseSortBy(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// SortOrderAsc is a SortOrder of type asc.
	SortOrderAsc SortOrder = "asc"
	// SortOrderDesc is a SortOrder of type desc.
	SortOrderDesc SortOrder = "desc"
)

var ErrInvalidSortOrder = errors.New("not a valid SortOrder")

// String implements the Stringer interface.
func (x SortOrder) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SortOrder) IsValid() bool {
	_, err := ParseSortOrder(string(x))
	return err == nil
}

var _SortOrderValue = map[string]SortOrder{
	"asc":  SortOrderAsc,
	"desc": SortOrderDesc,
}

// ParseSortOrder attempts to convert a string to a SortOrder.
func ParseSortOrder(name string) (SortOrder, error) {
	if x, ok := _SortOrderValue[name]; ok {
		return x, nil
	}
	return SortOrder(""), fmt.Errorf("%s is %w", name, ErrInvalidSortOrder)
}

// MarshalText implements the text marshaller method.
func (x SortOrder) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *SortOrder) UnmarshalText(text []byte) error {
	tmp, err := ParseSortOrder(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
